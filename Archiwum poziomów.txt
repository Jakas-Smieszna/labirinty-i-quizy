POZIOM TESTOWY 1:
Cofniecia: 25
Limit czasu: 600s.
L1:
   [P][P][P]
   [P]   [P]
[S][P]   [P][P][P]	 [P][>]
		       [P]   [P]
			   [P][P][P]
Q1:
Wyzwanie: bezpieczny
Pytania: 5
Próg punktowy: 10.0
L2:
[<][P][P][P][>]
Q2:
Wyzwanie: stra¿nik
Pytania: 6
Próg punktowy: 12.0
Próg stra¿nika: 6.0

Kod inicjacji:
        limit_cofniecia = 25;
        limit_czas = 600.0;
        poziomik.etapy = new char[5] {'l', 'q', 'l', 'q', '='};
        //LABIRYNT 1
        Element* l1_elementy = new Element[18];
        int licznik = 0;
        int NOWY_ID_pole = 0;
        float obecny_x = 0.0f;
        float obecny_y = 0.0f;
        for (licznik; licznik < 1; licznik++) {
            l1_elementy[licznik].typ_tab = new char[3] {'p', 's', '-'};
            l1_elementy[licznik].ID_tab = new int[1] {NOWY_ID_pole};
            NOWY_ID_pole = NOWY_ID_pole + 1;
            l1_elementy[licznik].x = obecny_x;
            l1_elementy[licznik].y = obecny_y;
        }
        for (licznik; licznik < 16; licznik++) {
            l1_elementy[licznik].typ_tab = new char[2] {'p', '-'};
            l1_elementy[licznik].ID_tab = new int[1] {NOWY_ID_pole};
            NOWY_ID_pole = NOWY_ID_pole + 1;
            if (licznik == 1
                || (licznik >= 4 && licznik <= 5)
                || (licznik >= 8 && licznik <= 9)
                || (licznik >= 12 && licznik <= 13)) {
                obecny_x = obecny_x + ODLEGLOSC_MIEDZY_POLAMI;
            }
            else if ((licznik >= 2 && licznik <= 3)
                || (licznik >= 14 && licznik <= 15)) {
                obecny_y = obecny_y + ODLEGLOSC_MIEDZY_POLAMI;
            }
            else if ((licznik >= 6 && licznik <= 7)
                || (licznik >= 10 && licznik <= 11)) {
                obecny_y = obecny_y - ODLEGLOSC_MIEDZY_POLAMI;
            }
            l1_elementy[licznik].x = obecny_x;
            l1_elementy[licznik].y = obecny_y;
        }
        for (licznik; licznik < 17; licznik++) {
            l1_elementy[licznik].typ_tab = new char[3] {'p', '>', '-'};
            l1_elementy[licznik].ID_tab = new int[1] {NOWY_ID_pole};
            NOWY_ID_pole = NOWY_ID_pole + 1;
            obecny_x = obecny_x + ODLEGLOSC_MIEDZY_POLAMI;
            l1_elementy[licznik].x = obecny_x;
            l1_elementy[licznik].y = obecny_y;
        }
        for (licznik; licznik < 18; licznik++) {
            l1_elementy[licznik].typ_tab = new char[1] {'='};
        }
        Pole* l1_pola = new Pole[17];
        //LABIRYNT 2
        Element* l2_elementy = new Element[6];
        licznik = 0;
        NOWY_ID_pole = 0;
        obecny_x = 0.0f;
        obecny_y = 0.0f;
        for (licznik; licznik < 1; licznik++) {
            l2_elementy[licznik].typ_tab = new char[3] {'p', '<', '-'};
            l2_elementy[licznik].ID_tab = new int[1] {NOWY_ID_pole};
            NOWY_ID_pole = NOWY_ID_pole + 1;
            l2_elementy[licznik].x = obecny_x;
            l2_elementy[licznik].y = obecny_y;
        }
        for (licznik; licznik < 4; licznik++) {
            l2_elementy[licznik].typ_tab = new char[2] {'p', '-'};
            l2_elementy[licznik].ID_tab = new int[1] {NOWY_ID_pole};
            NOWY_ID_pole = NOWY_ID_pole + 1;
            obecny_x = obecny_x + ODLEGLOSC_MIEDZY_POLAMI;
            l2_elementy[licznik].x = obecny_x;
            l2_elementy[licznik].y = obecny_y;
        }
        for (licznik; licznik < 5; licznik++) {
            l2_elementy[licznik].typ_tab = new char[3] {'p', '>', '-'};
            l2_elementy[licznik].ID_tab = new int[1] {NOWY_ID_pole};
            NOWY_ID_pole = NOWY_ID_pole + 1;
            obecny_x = obecny_x + ODLEGLOSC_MIEDZY_POLAMI;
            l2_elementy[licznik].x = obecny_x;
            l2_elementy[licznik].y = obecny_y;
        }
        for (licznik; licznik < 6; licznik++) {
            l2_elementy[licznik].typ_tab = new char[1] {'='};
        }
        Pole* l2_pola = new Pole[5];


        poziomik.labirynty = new Labirynt[2]{
            Labirynt(l1_elementy, l1_pola, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
            Labirynt(l2_elementy, l2_pola, NULL, NULL, NULL, NULL, NULL, NULL, NULL) };

        int* q1_zakresyID = new int[2] {1, 7};
        int* q2_zakresyID = new int[2] {3, 10};
        poziomik.quizy = new Quiz[2]{ 
            Quiz(q1_zakresyID, 'b', 1, 5, 10.0, 0.0), 
            Quiz(q2_zakresyID, 's', 1, 6, 12.0, 6.0) };
----------------------------------------------------------------------------------
POZIOM TESTOWY 1.2: (ogien i wielokrotne zmiany widzialnosci)

Kod inicjacji:
limit_cofniecia = 25;
        limit_czas = 600.0;
        poziomik.etapy = new char[5] {'l', 'q', 'l', 'q', '='};
        //LABIRYNT 1
        Element* l1_elementy = new Element[18];
        int licznik = 0;
        int NOWY_ID_pole = 0;
        float obecny_x = 0.0f;
        float obecny_y = 0.0f;
        for (licznik; licznik < 1; licznik++) {
            l1_elementy[licznik].typ_tab = new char[3] {'p', 's', '-'};
            l1_elementy[licznik].ID_tab = new int[1] {NOWY_ID_pole};
            NOWY_ID_pole = NOWY_ID_pole + 1;
            l1_elementy[licznik].x = obecny_x;
            l1_elementy[licznik].y = obecny_y;
        }
        for (licznik; licznik < 16; licznik++) {
            l1_elementy[licznik].typ_tab = new char[2] {'p', '-'};
            l1_elementy[licznik].ID_tab = new int[1] {NOWY_ID_pole};
            NOWY_ID_pole = NOWY_ID_pole + 1;
            if (licznik == 1
                || (licznik >= 4 && licznik <= 5)
                || (licznik >= 8 && licznik <= 9)
                || (licznik >= 12 && licznik <= 13)) {
                obecny_x = obecny_x + ODLEGLOSC_MIEDZY_POLAMI;
            }
            else if ((licznik >= 2 && licznik <= 3)
                || (licznik >= 14 && licznik <= 15)) {
                obecny_y = obecny_y + ODLEGLOSC_MIEDZY_POLAMI;
            }
            else if ((licznik >= 6 && licznik <= 7)
                || (licznik >= 10 && licznik <= 11)) {
                obecny_y = obecny_y - ODLEGLOSC_MIEDZY_POLAMI;
            }
            l1_elementy[licznik].x = obecny_x;
            l1_elementy[licznik].y = obecny_y;
        }
        for (licznik; licznik < 17; licznik++) {
            l1_elementy[licznik].typ_tab = new char[3] {'p', '>', '-'};
            l1_elementy[licznik].ID_tab = new int[1] {NOWY_ID_pole};
            NOWY_ID_pole = NOWY_ID_pole + 1;
            obecny_x = obecny_x + ODLEGLOSC_MIEDZY_POLAMI;
            l1_elementy[licznik].x = obecny_x;
            l1_elementy[licznik].y = obecny_y;
        }
        for (licznik; licznik < 18; licznik++) {
            l1_elementy[licznik].typ_tab = new char[1] {'='};
        }
        Pole* l1_pola = new Pole[17];

        //LABIRYNT 2
        Element* l2_elementy = new Element[6];
        licznik = 0;
        NOWY_ID_pole = 0;
        int NOWY_ID_etapy_znikania = 0;
        int NOWY_ID_widzialnosc = 0;
        int NOWY_ID_znikanie_czas = 0;
        int NOWY_ID_pojawiajace_czas = 0;
        obecny_x = 0.0f;
        obecny_y = 0.0f;

        for (licznik; licznik < 1; licznik++) {
            l2_elementy[licznik].typ_tab = new char[3] {'p', '<', '-'};
            l2_elementy[licznik].ID_tab = new int[1] {NOWY_ID_pole};
            NOWY_ID_pole = NOWY_ID_pole + 1;
            l2_elementy[licznik].x = obecny_x;
            l2_elementy[licznik].y = obecny_y;
        }
        for (licznik; licznik < 4; licznik++) {
            //l2_elementy[licznik].typ_tab = new char[4] {'q', 'a', 'p', '-'};
            //l2_elementy[licznik].ID_tab = new int[3] {NOWY_ID_widzialnosc, NOWY_ID_pojawiajace_czas, NOWY_ID_pole};
            l2_elementy[licznik].typ_tab = new char[7] {'w', 'a', 'o', 'a', 'z', 'p', '-'};
            l2_elementy[licznik].ID_tab = new int[7] {NOWY_ID_etapy_znikania, NOWY_ID_widzialnosc, NOWY_ID_pojawiajace_czas, NOWY_ID_znikanie_czas, NOWY_ID_pojawiajace_czas + 1, NOWY_ID_znikanie_czas + 1, NOWY_ID_pole};
            NOWY_ID_pole = NOWY_ID_pole + 1;
            NOWY_ID_etapy_znikania = NOWY_ID_etapy_znikania + 1;
            NOWY_ID_widzialnosc = NOWY_ID_widzialnosc + 1;
            NOWY_ID_znikanie_czas = NOWY_ID_znikanie_czas + 2;
            NOWY_ID_pojawiajace_czas = NOWY_ID_pojawiajace_czas + 2;
            obecny_x = obecny_x + ODLEGLOSC_MIEDZY_POLAMI;
            l2_elementy[licznik].x = obecny_x;
            l2_elementy[licznik].y = obecny_y;
        }
        for (licznik; licznik < 5; licznik++) {
            l2_elementy[licznik].typ_tab = new char[3] {'p', '>', '-'};
            l2_elementy[licznik].ID_tab = new int[1] {NOWY_ID_pole};
            NOWY_ID_pole = NOWY_ID_pole + 1;
            obecny_x = obecny_x + ODLEGLOSC_MIEDZY_POLAMI;
            l2_elementy[licznik].x = obecny_x;
            l2_elementy[licznik].y = obecny_y;
        }
        for (licznik; licznik < 6; licznik++) {
            l2_elementy[licznik].typ_tab = new char[1] {'='};
        }

        Pole* l2_pola = new Pole[5];

        int* l2_widzialnosc = new int[3] {0,0,0};
        L_widzialnosc = NULL;
        L_widzialnosc_N = new int[2] {0,3};

        char* l2_etapy_znikania = new char[3] {1, 1, 1};
        L_etapy_znikania = NULL;
        L_etapy_znikania_N = new int[2] {0, 3};//new int[2] {0, 0};

        double* l2_zapadnie_czas = new double[6] {4.1, 8.0, 4.8, 8.2, 5.5, 8.5};
        double* l2_pojawiajace_czas = new double[6] {0.7, 5.8, 1.4, 6.1, 2.1, 6.4};

        poziomik.labirynty = new Labirynt[2]{
            Labirynt(l1_elementy, l1_pola, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
            Labirynt(l2_elementy, l2_pola, NULL, l2_zapadnie_czas, l2_pojawiajace_czas, NULL, NULL, l2_etapy_znikania, l2_widzialnosc) };

        int* q1_zakresyID = new int[2] {1, 7};
        int* q2_zakresyID = new int[2] {3, 10};
        poziomik.quizy = new Quiz[2]{ 
            Quiz(q1_zakresyID, 'b', 1, 5, 10.0, 0.0), 
            Quiz(q2_zakresyID, 's', 1, 6, 12.0, 6.0) };
----------------------------------------------------------------------------------